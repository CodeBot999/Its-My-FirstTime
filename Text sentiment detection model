

import pandas as pd

df = pd.read_csv("/content/dash_text/DASH_2020_Drug_Data.csv")
print(df.columns.tolist())
df.head()


import pandas as pd
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dropout, Dense
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

# Load dataset
df = pd.read_csv("/content/dash_text/DASH_2020_Drug_Data.csv")

# Combine title and body into a single text input
df['text'] = df['title'].fillna('') + " " + df['body'].fillna('')

# Encode labels
le = LabelEncoder()
df['label'] = le.fit_transform(df['label_classification'])

texts = df['text'].astype(str).tolist()
labels = df['label'].tolist()

# Tokenize and pad
tokenizer = Tokenizer(num_words=10000, oov_token='<OOV>')
tokenizer.fit_on_texts(texts)
X = tokenizer.texts_to_sequences(texts)
X = pad_sequences(X, maxlen=200, padding='post')
y = np.array(labels)

# Train-test split
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)

# Build model
text_model = Sequential([
    Embedding(input_dim=10000, output_dim=128, input_length=200),
    LSTM(128, return_sequences=True),
    Dropout(0.3),
    LSTM(64),
    Dropout(0.3),
    Dense(32, activation='relu'),
    Dense(len(le.classes_), activation='softmax')
])

text_model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
text_model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=5, batch_size=16)


from sklearn.metrics import classification_report

# Predict on validation set
y_pred = np.argmax(text_model.predict(X_val), axis=1)

print(classification_report(y_val, y_pred, target_names=le.classes_))


import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

# Get predictions
y_pred = np.argmax(text_model.predict(X_val), axis=1)

# Compute confusion matrix
cm = confusion_matrix(y_val, y_pred)

# Plot
plt.figure(figsize=(8,6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=le.classes_, yticklabels=le.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()


import collections
collections.Counter(y_train)


from sklearn.utils import class_weight
import numpy as np

class_weights = class_weight.compute_class_weight(
    class_weight='balanced',
    classes=np.unique(y_train),
    y=y_train
)

cw_dict = dict(enumerate(class_weights))
print("Class Weights:", cw_dict)


from tensorflow.keras.callbacks import EarlyStopping

early_stop = EarlyStopping(
    monitor='val_loss',
    patience=2,
    restore_best_weights=True
)


text_model.fit(
    X_train, y_train,
    validation_data=(X_val, y_val),
    epochs=10, batch_size=32,
    class_weight=cw_dict,
    callbacks=[early_stop]
)


import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

# Get predictions
y_pred = np.argmax(text_model.predict(X_val), axis=1)

# Compute confusion matrix
cm = confusion_matrix(y_val, y_pred)

# Plot
plt.figure(figsize=(8,6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=le.classes_, yticklabels=le.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()


import collections
collections.Counter(y_train)


from sklearn.metrics import classification_report

# Predict on validation set
y_pred = np.argmax(text_model.predict(X_val), axis=1)

print(classification_report(y_val, y_pred, target_names=le.classes_))
